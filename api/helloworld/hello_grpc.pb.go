// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	CreateHello(ctx context.Context, in *CreateHelloRequest, opts ...grpc.CallOption) (*CreateHelloReply, error)
	UpdateHello(ctx context.Context, in *UpdateHelloRequest, opts ...grpc.CallOption) (*UpdateHelloReply, error)
	DeleteHello(ctx context.Context, in *DeleteHelloRequest, opts ...grpc.CallOption) (*DeleteHelloReply, error)
	GetHello(ctx context.Context, in *GetHelloRequest, opts ...grpc.CallOption) (*GetHelloReply, error)
	ListHello(ctx context.Context, in *ListHelloRequest, opts ...grpc.CallOption) (*ListHelloReply, error)
	HelloDemo(ctx context.Context, in *HelloDemoRequest, opts ...grpc.CallOption) (*HelloDemoReply, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) CreateHello(ctx context.Context, in *CreateHelloRequest, opts ...grpc.CallOption) (*CreateHelloReply, error) {
	out := new(CreateHelloReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.Hello/CreateHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) UpdateHello(ctx context.Context, in *UpdateHelloRequest, opts ...grpc.CallOption) (*UpdateHelloReply, error) {
	out := new(UpdateHelloReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.Hello/UpdateHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) DeleteHello(ctx context.Context, in *DeleteHelloRequest, opts ...grpc.CallOption) (*DeleteHelloReply, error) {
	out := new(DeleteHelloReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.Hello/DeleteHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) GetHello(ctx context.Context, in *GetHelloRequest, opts ...grpc.CallOption) (*GetHelloReply, error) {
	out := new(GetHelloReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.Hello/GetHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) ListHello(ctx context.Context, in *ListHelloRequest, opts ...grpc.CallOption) (*ListHelloReply, error) {
	out := new(ListHelloReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.Hello/ListHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) HelloDemo(ctx context.Context, in *HelloDemoRequest, opts ...grpc.CallOption) (*HelloDemoReply, error) {
	out := new(HelloDemoReply)
	err := c.cc.Invoke(ctx, "/api.helloworld.Hello/HelloDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility
type HelloServer interface {
	CreateHello(context.Context, *CreateHelloRequest) (*CreateHelloReply, error)
	UpdateHello(context.Context, *UpdateHelloRequest) (*UpdateHelloReply, error)
	DeleteHello(context.Context, *DeleteHelloRequest) (*DeleteHelloReply, error)
	GetHello(context.Context, *GetHelloRequest) (*GetHelloReply, error)
	ListHello(context.Context, *ListHelloRequest) (*ListHelloReply, error)
	HelloDemo(context.Context, *HelloDemoRequest) (*HelloDemoReply, error)
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (UnimplementedHelloServer) CreateHello(context.Context, *CreateHelloRequest) (*CreateHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHello not implemented")
}
func (UnimplementedHelloServer) UpdateHello(context.Context, *UpdateHelloRequest) (*UpdateHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHello not implemented")
}
func (UnimplementedHelloServer) DeleteHello(context.Context, *DeleteHelloRequest) (*DeleteHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHello not implemented")
}
func (UnimplementedHelloServer) GetHello(context.Context, *GetHelloRequest) (*GetHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello not implemented")
}
func (UnimplementedHelloServer) ListHello(context.Context, *ListHelloRequest) (*ListHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHello not implemented")
}
func (UnimplementedHelloServer) HelloDemo(context.Context, *HelloDemoRequest) (*HelloDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloDemo not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_CreateHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).CreateHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.Hello/CreateHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).CreateHello(ctx, req.(*CreateHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_UpdateHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).UpdateHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.Hello/UpdateHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).UpdateHello(ctx, req.(*UpdateHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_DeleteHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).DeleteHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.Hello/DeleteHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).DeleteHello(ctx, req.(*DeleteHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.Hello/GetHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).GetHello(ctx, req.(*GetHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_ListHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).ListHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.Hello/ListHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).ListHello(ctx, req.(*ListHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_HelloDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).HelloDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.helloworld.Hello/HelloDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).HelloDemo(ctx, req.(*HelloDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHello",
			Handler:    _Hello_CreateHello_Handler,
		},
		{
			MethodName: "UpdateHello",
			Handler:    _Hello_UpdateHello_Handler,
		},
		{
			MethodName: "DeleteHello",
			Handler:    _Hello_DeleteHello_Handler,
		},
		{
			MethodName: "GetHello",
			Handler:    _Hello_GetHello_Handler,
		},
		{
			MethodName: "ListHello",
			Handler:    _Hello_ListHello_Handler,
		},
		{
			MethodName: "HelloDemo",
			Handler:    _Hello_HelloDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/hello.proto",
}
